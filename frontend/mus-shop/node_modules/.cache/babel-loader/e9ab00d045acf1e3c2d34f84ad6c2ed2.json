{"ast":null,"code":"import axios from 'axios';\nimport ProductActionTypes from './product.types';\nexport const listProducts = () => async dispatch => {\n  try {\n    dispatch({\n      type: ProductActionTypes.PRODUCT_LIST_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('/api/products');\n    dispatch({\n      type: ProductActionTypes.PRODUCT_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ProductActionTypes.PRODUCT_LIST_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n\n  ;\n};\nexport const listProductDetails = id => async dispatch => {\n  try {\n    dispatch({\n      type: ProductActionTypes.PRODUCT_DETAILS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get(`/api/products/${id}`);\n    dispatch({\n      type: ProductActionTypes.PRODUCT_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ProductActionTypes.PRODUCT_DETAILS_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n\n  ;\n};\nexport const deleteProduct = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ProductActionTypes.PRODUCT_DELETE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    await axios.delete(`/api/products/${id}`, config);\n    dispatch({\n      type: ProductActionTypes.PRODUCT_DELETE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: ProductActionTypes.PRODUCT_DELETE_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n\n  ;\n};\nexport const createProduct = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ProductActionTypes.PRODUCT_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    }; // Empty object passed since we have no body in the request\n\n    const data = await axios.post(`/api/products/`, {}, config);\n    dispatch({\n      type: ProductActionTypes.PRODUCT_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ProductActionTypes.PRODUCT_CREATE_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n\n  ;\n};\nexport const updateProduct = product => async (dispatch, getState) => {\n  console.log('product');\n\n  try {\n    dispatch({\n      type: ProductActionTypes.PRODUCT_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    }; // Empty object passed since we have no body in the request\n\n    const data = await axios.put(`/api/products/${product._id}`, product, config);\n    dispatch({\n      type: ProductActionTypes.PRODUCT_UPDATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: ProductActionTypes.PRODUCT_UPDATE_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n\n  ;\n};","map":{"version":3,"sources":["C:/Users/alvar/Documents/1.Web Development Projects/FINAL_COPIES_OF_PROJECTS/MERN-E-Commerce/ProShop/frontend/mus-shop/src/redux/product/product.actions.js"],"names":["axios","ProductActionTypes","listProducts","dispatch","type","PRODUCT_LIST_REQUEST","data","get","PRODUCT_LIST_SUCCESS","payload","error","PRODUCT_LIST_FAILURE","response","message","listProductDetails","id","PRODUCT_DETAILS_REQUEST","PRODUCT_DETAILS_SUCCESS","PRODUCT_DETAILS_FAILURE","deleteProduct","getState","PRODUCT_DELETE_REQUEST","userLogin","userInfo","config","headers","Authorization","token","delete","PRODUCT_DELETE_SUCCESS","PRODUCT_DELETE_FAILURE","createProduct","PRODUCT_CREATE_REQUEST","post","PRODUCT_CREATE_SUCCESS","PRODUCT_CREATE_FAILURE","updateProduct","product","console","log","PRODUCT_UPDATE_REQUEST","put","_id","PRODUCT_UPDATE_SUCCESS","PRODUCT_UPDATE_FAILURE"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport ProductActionTypes from './product.types';\r\n\r\nexport const listProducts = () => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: ProductActionTypes.PRODUCT_LIST_REQUEST\r\n        });\r\n\r\n        const { data } = await axios.get('/api/products')\r\n\r\n        dispatch({\r\n            type: ProductActionTypes.PRODUCT_LIST_SUCCESS,\r\n            payload: data,\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ProductActionTypes.PRODUCT_LIST_FAILURE,\r\n            payload: error.response && error.response.data.message \r\n            ? error.response.data.message\r\n            : error.message,\r\n        });\r\n    };\r\n};\r\n\r\nexport const listProductDetails = (id) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: ProductActionTypes.PRODUCT_DETAILS_REQUEST\r\n        });\r\n\r\n        const { data } = await axios.get(`/api/products/${id}`)\r\n\r\n        dispatch({\r\n            type: ProductActionTypes.PRODUCT_DETAILS_SUCCESS,\r\n            payload: data,\r\n        })\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ProductActionTypes.PRODUCT_DETAILS_FAILURE,\r\n            payload: error.response && error.response.data.message \r\n            ? error.response.data.message\r\n            : error.message,\r\n        });\r\n    };\r\n};\r\n\r\n\r\nexport const deleteProduct = (id) => async (dispatch ,getState) => {\r\n\r\n    try {\r\n        dispatch({\r\n            type: ProductActionTypes.PRODUCT_DELETE_REQUEST\r\n        });\r\n\r\n        const { userLogin: { userInfo } } = getState();\r\n\r\n        const config = {\r\n            headers: {\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        };\r\n\r\n        await axios.delete(`/api/products/${id}`, config);\r\n\r\n        dispatch({type: ProductActionTypes.PRODUCT_DELETE_SUCCESS,});\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ProductActionTypes.PRODUCT_DELETE_FAILURE,\r\n            payload: error.response && error.response.data.message \r\n            ? error.response.data.message\r\n            : error.message,\r\n        });\r\n    };\r\n};\r\n\r\nexport const createProduct = () => async (dispatch ,getState) => {\r\n\r\n    try {\r\n        dispatch({\r\n            type: ProductActionTypes.PRODUCT_CREATE_REQUEST\r\n        });\r\n\r\n        const { userLogin: { userInfo } } = getState();\r\n\r\n        const config = {\r\n            headers: {\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        };\r\n\r\n        // Empty object passed since we have no body in the request\r\n        const data = await axios.post(`/api/products/`, {}, config);\r\n\r\n        dispatch({\r\n            type: ProductActionTypes.PRODUCT_CREATE_SUCCESS,\r\n            payload: data\r\n        });\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ProductActionTypes.PRODUCT_CREATE_FAILURE,\r\n            payload: error.response && error.response.data.message \r\n            ? error.response.data.message\r\n            : error.message,\r\n        });\r\n    };\r\n};\r\n\r\nexport const updateProduct = (product) => async (dispatch ,getState) => {\r\n    console.log('product')\r\n    try {\r\n        dispatch({\r\n            type: ProductActionTypes.PRODUCT_UPDATE_REQUEST\r\n        });\r\n\r\n        const { userLogin: { userInfo } } = getState();\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        };\r\n\r\n        // Empty object passed since we have no body in the request\r\n        const data = await axios.put(`/api/products/${product._id}`, product, config);\r\n\r\n        dispatch({\r\n            type: ProductActionTypes.PRODUCT_UPDATE_SUCCESS,\r\n            payload: data\r\n        });\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: ProductActionTypes.PRODUCT_UPDATE_FAILURE,\r\n            payload: error.response && error.response.data.message \r\n            ? error.response.data.message\r\n            : error.message,\r\n        });\r\n    };\r\n};"]},"metadata":{},"sourceType":"module"}